// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menul-service/service/model"
)

func newOrderItem(db *gorm.DB, opts ...gen.DOOption) orderItem {
	_orderItem := orderItem{}

	_orderItem.orderItemDo.UseDB(db, opts...)
	_orderItem.orderItemDo.UseModel(&model.OrderItem{})

	tableName := _orderItem.orderItemDo.TableName()
	_orderItem.ALL = field.NewAsterisk(tableName)
	_orderItem.ID = field.NewString(tableName, "id")
	_orderItem.OrderID = field.NewString(tableName, "order_id")
	_orderItem.FoodID = field.NewString(tableName, "food_id")
	_orderItem.Price = field.NewFloat32(tableName, "price")
	_orderItem.Name = field.NewString(tableName, "name")
	_orderItem.CreateAt = field.NewTime(tableName, "create_at")
	_orderItem.UpdateAt = field.NewTime(tableName, "update_at")

	_orderItem.fillFieldMap()

	return _orderItem
}

type orderItem struct {
	orderItemDo orderItemDo

	ALL      field.Asterisk
	ID       field.String
	OrderID  field.String
	FoodID   field.String
	Price    field.Float32
	Name     field.String
	CreateAt field.Time
	UpdateAt field.Time

	fieldMap map[string]field.Expr
}

func (o orderItem) Table(newTableName string) *orderItem {
	o.orderItemDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderItem) As(alias string) *orderItem {
	o.orderItemDo.DO = *(o.orderItemDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderItem) updateTableName(table string) *orderItem {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.OrderID = field.NewString(table, "order_id")
	o.FoodID = field.NewString(table, "food_id")
	o.Price = field.NewFloat32(table, "price")
	o.Name = field.NewString(table, "name")
	o.CreateAt = field.NewTime(table, "create_at")
	o.UpdateAt = field.NewTime(table, "update_at")

	o.fillFieldMap()

	return o
}

func (o *orderItem) WithContext(ctx context.Context) *orderItemDo {
	return o.orderItemDo.WithContext(ctx)
}

func (o orderItem) TableName() string { return o.orderItemDo.TableName() }

func (o orderItem) Alias() string { return o.orderItemDo.Alias() }

func (o orderItem) Columns(cols ...field.Expr) gen.Columns { return o.orderItemDo.Columns(cols...) }

func (o *orderItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderItem) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["food_id"] = o.FoodID
	o.fieldMap["price"] = o.Price
	o.fieldMap["name"] = o.Name
	o.fieldMap["create_at"] = o.CreateAt
	o.fieldMap["update_at"] = o.UpdateAt
}

func (o orderItem) clone(db *gorm.DB) orderItem {
	o.orderItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderItem) replaceDB(db *gorm.DB) orderItem {
	o.orderItemDo.ReplaceDB(db)
	return o
}

type orderItemDo struct{ gen.DO }

func (o orderItemDo) Debug() *orderItemDo {
	return o.withDO(o.DO.Debug())
}

func (o orderItemDo) WithContext(ctx context.Context) *orderItemDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderItemDo) ReadDB() *orderItemDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderItemDo) WriteDB() *orderItemDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderItemDo) Session(config *gorm.Session) *orderItemDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderItemDo) Clauses(conds ...clause.Expression) *orderItemDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderItemDo) Returning(value interface{}, columns ...string) *orderItemDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderItemDo) Not(conds ...gen.Condition) *orderItemDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderItemDo) Or(conds ...gen.Condition) *orderItemDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderItemDo) Select(conds ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderItemDo) Where(conds ...gen.Condition) *orderItemDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderItemDo) Order(conds ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderItemDo) Distinct(cols ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderItemDo) Omit(cols ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderItemDo) Join(table schema.Tabler, on ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderItemDo) Group(cols ...field.Expr) *orderItemDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderItemDo) Having(conds ...gen.Condition) *orderItemDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderItemDo) Limit(limit int) *orderItemDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderItemDo) Offset(offset int) *orderItemDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orderItemDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderItemDo) Unscoped() *orderItemDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderItemDo) Create(values ...*model.OrderItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderItemDo) CreateInBatches(values []*model.OrderItem, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderItemDo) Save(values ...*model.OrderItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderItemDo) First() (*model.OrderItem, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) Take() (*model.OrderItem, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) Last() (*model.OrderItem, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) Find() ([]*model.OrderItem, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderItem), err
}

func (o orderItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderItem, err error) {
	buf := make([]*model.OrderItem, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderItemDo) FindInBatches(result *[]*model.OrderItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderItemDo) Attrs(attrs ...field.AssignExpr) *orderItemDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderItemDo) Assign(attrs ...field.AssignExpr) *orderItemDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderItemDo) Joins(fields ...field.RelationField) *orderItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderItemDo) Preload(fields ...field.RelationField) *orderItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderItemDo) FirstOrInit() (*model.OrderItem, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) FirstOrCreate() (*model.OrderItem, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderItem), nil
	}
}

func (o orderItemDo) FindByPage(offset int, limit int) (result []*model.OrderItem, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderItemDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderItemDo) Delete(models ...*model.OrderItem) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderItemDo) withDO(do gen.Dao) *orderItemDo {
	o.DO = *do.(*gen.DO)
	return o
}
