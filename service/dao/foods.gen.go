// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menul-service/service/model"
)

func newFood(db *gorm.DB, opts ...gen.DOOption) food {
	_food := food{}

	_food.foodDo.UseDB(db, opts...)
	_food.foodDo.UseModel(&model.Food{})

	tableName := _food.foodDo.TableName()
	_food.ALL = field.NewAsterisk(tableName)
	_food.ID = field.NewString(tableName, "id")
	_food.Name = field.NewString(tableName, "name")
	_food.Category = field.NewString(tableName, "category")
	_food.Desc = field.NewString(tableName, "desc")
	_food.CreateAt = field.NewTime(tableName, "create_at")
	_food.UpdateAt = field.NewTime(tableName, "update_at")
	_food.TimePeriod = field.NewString(tableName, "time_period")
	_food.Image = field.NewString(tableName, "image")
	_food.Price = field.NewFloat32(tableName, "price")
	_food.ImageFile = field.NewString(tableName, "image_file")
	_food.LikingLevel = field.NewInt32(tableName, "liking_level")

	_food.fillFieldMap()

	return _food
}

type food struct {
	foodDo foodDo

	ALL         field.Asterisk
	ID          field.String
	Name        field.String
	Category    field.String
	Desc        field.String
	CreateAt    field.Time
	UpdateAt    field.Time
	TimePeriod  field.String
	Image       field.String
	Price       field.Float32
	ImageFile   field.String
	LikingLevel field.Int32

	fieldMap map[string]field.Expr
}

func (f food) Table(newTableName string) *food {
	f.foodDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f food) As(alias string) *food {
	f.foodDo.DO = *(f.foodDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *food) updateTableName(table string) *food {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewString(table, "id")
	f.Name = field.NewString(table, "name")
	f.Category = field.NewString(table, "category")
	f.Desc = field.NewString(table, "desc")
	f.CreateAt = field.NewTime(table, "create_at")
	f.UpdateAt = field.NewTime(table, "update_at")
	f.TimePeriod = field.NewString(table, "time_period")
	f.Image = field.NewString(table, "image")
	f.Price = field.NewFloat32(table, "price")
	f.ImageFile = field.NewString(table, "image_file")
	f.LikingLevel = field.NewInt32(table, "liking_level")

	f.fillFieldMap()

	return f
}

func (f *food) WithContext(ctx context.Context) *foodDo { return f.foodDo.WithContext(ctx) }

func (f food) TableName() string { return f.foodDo.TableName() }

func (f food) Alias() string { return f.foodDo.Alias() }

func (f food) Columns(cols ...field.Expr) gen.Columns { return f.foodDo.Columns(cols...) }

func (f *food) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *food) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["category"] = f.Category
	f.fieldMap["desc"] = f.Desc
	f.fieldMap["create_at"] = f.CreateAt
	f.fieldMap["update_at"] = f.UpdateAt
	f.fieldMap["time_period"] = f.TimePeriod
	f.fieldMap["image"] = f.Image
	f.fieldMap["price"] = f.Price
	f.fieldMap["image_file"] = f.ImageFile
	f.fieldMap["liking_level"] = f.LikingLevel
}

func (f food) clone(db *gorm.DB) food {
	f.foodDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f food) replaceDB(db *gorm.DB) food {
	f.foodDo.ReplaceDB(db)
	return f
}

type foodDo struct{ gen.DO }

func (f foodDo) Debug() *foodDo {
	return f.withDO(f.DO.Debug())
}

func (f foodDo) WithContext(ctx context.Context) *foodDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f foodDo) ReadDB() *foodDo {
	return f.Clauses(dbresolver.Read)
}

func (f foodDo) WriteDB() *foodDo {
	return f.Clauses(dbresolver.Write)
}

func (f foodDo) Session(config *gorm.Session) *foodDo {
	return f.withDO(f.DO.Session(config))
}

func (f foodDo) Clauses(conds ...clause.Expression) *foodDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f foodDo) Returning(value interface{}, columns ...string) *foodDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f foodDo) Not(conds ...gen.Condition) *foodDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f foodDo) Or(conds ...gen.Condition) *foodDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f foodDo) Select(conds ...field.Expr) *foodDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f foodDo) Where(conds ...gen.Condition) *foodDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f foodDo) Order(conds ...field.Expr) *foodDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f foodDo) Distinct(cols ...field.Expr) *foodDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f foodDo) Omit(cols ...field.Expr) *foodDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f foodDo) Join(table schema.Tabler, on ...field.Expr) *foodDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f foodDo) LeftJoin(table schema.Tabler, on ...field.Expr) *foodDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f foodDo) RightJoin(table schema.Tabler, on ...field.Expr) *foodDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f foodDo) Group(cols ...field.Expr) *foodDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f foodDo) Having(conds ...gen.Condition) *foodDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f foodDo) Limit(limit int) *foodDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f foodDo) Offset(offset int) *foodDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f foodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *foodDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f foodDo) Unscoped() *foodDo {
	return f.withDO(f.DO.Unscoped())
}

func (f foodDo) Create(values ...*model.Food) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f foodDo) CreateInBatches(values []*model.Food, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f foodDo) Save(values ...*model.Food) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f foodDo) First() (*model.Food, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Food), nil
	}
}

func (f foodDo) Take() (*model.Food, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Food), nil
	}
}

func (f foodDo) Last() (*model.Food, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Food), nil
	}
}

func (f foodDo) Find() ([]*model.Food, error) {
	result, err := f.DO.Find()
	return result.([]*model.Food), err
}

func (f foodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Food, err error) {
	buf := make([]*model.Food, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f foodDo) FindInBatches(result *[]*model.Food, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f foodDo) Attrs(attrs ...field.AssignExpr) *foodDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f foodDo) Assign(attrs ...field.AssignExpr) *foodDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f foodDo) Joins(fields ...field.RelationField) *foodDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f foodDo) Preload(fields ...field.RelationField) *foodDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f foodDo) FirstOrInit() (*model.Food, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Food), nil
	}
}

func (f foodDo) FirstOrCreate() (*model.Food, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Food), nil
	}
}

func (f foodDo) FindByPage(offset int, limit int) (result []*model.Food, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f foodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f foodDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f foodDo) Delete(models ...*model.Food) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *foodDo) withDO(do gen.Dao) *foodDo {
	f.DO = *do.(*gen.DO)
	return f
}
func (f food) GetFoodCategoryList() ([]string, error) {
	var categories []string

	err := f.
		WithContext(context.TODO()).
		Select(f.Category).
		Distinct().
		Pluck(f.Category, &categories)

	if err != nil {
		return nil, err
	}
	return categories, nil
}
